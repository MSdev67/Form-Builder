{"ast":null,"code":"var _jsxFileName = \"/Users/msdev67/Documents/form-builder/client/src/context/FormContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getForm, createForm, updateForm, uploadImage } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormContext = /*#__PURE__*/createContext();\nexport const FormProvider = ({\n  children\n}) => {\n  _s();\n  const [form, setForm] = useState({\n    title: '',\n    description: '',\n    headerImage: '',\n    questions: []\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    if (id) loadForm(id);\n  }, [id]);\n  const loadForm = async formId => {\n    setIsLoading(true);\n    try {\n      const response = await getForm(formId);\n      setForm(response.data);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const saveForm = async () => {\n    setIsLoading(true);\n    try {\n      let response;\n      if (form._id) {\n        response = await updateForm(form._id, form);\n      } else {\n        response = await createForm(form);\n      }\n      setForm(response.data);\n      setError(null);\n      return response.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const updateFormData = updates => {\n    setForm(prev => ({\n      ...prev,\n      ...updates\n    }));\n  };\n  const addQuestion = questionType => {\n    const newQuestion = createQuestion(questionType);\n    setForm(prev => ({\n      ...prev,\n      questions: [...prev.questions, newQuestion]\n    }));\n    return newQuestion;\n  };\n  const updateQuestion = (questionId, updates) => {\n    setForm(prev => ({\n      ...prev,\n      questions: prev.questions.map(q => q.id === questionId ? {\n        ...q,\n        ...updates\n      } : q)\n    }));\n  };\n  const deleteQuestion = questionId => {\n    setForm(prev => ({\n      ...prev,\n      questions: prev.questions.filter(q => q.id !== questionId)\n    }));\n  };\n  const uploadImageFile = async file => {\n    try {\n      const response = await uploadImage(file);\n      return response.data.filename;\n    } catch (err) {\n      throw err;\n    }\n  };\n  const createQuestion = type => {\n    const baseQuestion = {\n      id: Date.now().toString(),\n      type,\n      questionText: '',\n      questionImage: ''\n    };\n    switch (type) {\n      case 'categorize':\n        return {\n          ...baseQuestion,\n          categories: [{\n            id: Date.now().toString() + 1,\n            name: 'Category 1',\n            options: []\n          }, {\n            id: Date.now().toString() + 2,\n            name: 'Category 2',\n            options: []\n          }],\n          items: []\n        };\n      case 'cloze':\n        return {\n          ...baseQuestion,\n          clozeData: {\n            text: '',\n            blanks: []\n          }\n        };\n      case 'comprehension':\n        return {\n          ...baseQuestion,\n          comprehensionData: {\n            passage: '',\n            questions: []\n          }\n        };\n      default:\n        return baseQuestion;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: {\n      form,\n      isLoading,\n      error,\n      updateForm: updateFormData,\n      addQuestion,\n      updateQuestion,\n      deleteQuestion,\n      saveForm,\n      uploadImage: uploadImageFile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(FormProvider, \"WK0w1YpWtiasTK6PRZwy/gTipjA=\", false, function () {\n  return [useParams];\n});\n_c = FormProvider;\nexport const useForm = () => {\n  _s2();\n  return useContext(FormContext);\n};\n_s2(useForm, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useParams","getForm","createForm","updateForm","uploadImage","jsxDEV","_jsxDEV","FormContext","FormProvider","children","_s","form","setForm","title","description","headerImage","questions","isLoading","setIsLoading","error","setError","id","loadForm","formId","response","data","err","message","saveForm","_id","updateFormData","updates","prev","addQuestion","questionType","newQuestion","createQuestion","updateQuestion","questionId","map","q","deleteQuestion","filter","uploadImageFile","file","filename","type","baseQuestion","Date","now","toString","questionText","questionImage","categories","name","options","items","clozeData","text","blanks","comprehensionData","passage","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useForm","_s2","$RefreshReg$"],"sources":["/Users/msdev67/Documents/form-builder/client/src/context/FormContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getForm, createForm, updateForm, uploadImage } from '../services/api';\n\nconst FormContext = createContext();\n\nexport const FormProvider = ({ children }) => {\n  const [form, setForm] = useState({\n    title: '',\n    description: '',\n    headerImage: '',\n    questions: []\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    if (id) loadForm(id);\n  }, [id]);\n\n  const loadForm = async (formId) => {\n    setIsLoading(true);\n    try {\n      const response = await getForm(formId);\n      setForm(response.data);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const saveForm = async () => {\n    setIsLoading(true);\n    try {\n      let response;\n      if (form._id) {\n        response = await updateForm(form._id, form);\n      } else {\n        response = await createForm(form);\n      }\n      setForm(response.data);\n      setError(null);\n      return response.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateFormData = (updates) => {\n    setForm(prev => ({ ...prev, ...updates }));\n  };\n\n  const addQuestion = (questionType) => {\n    const newQuestion = createQuestion(questionType);\n    setForm(prev => ({\n      ...prev,\n      questions: [...prev.questions, newQuestion]\n    }));\n    return newQuestion;\n  };\n\n  const updateQuestion = (questionId, updates) => {\n    setForm(prev => ({\n      ...prev,\n      questions: prev.questions.map(q => \n        q.id === questionId ? { ...q, ...updates } : q\n      )\n    }));\n  };\n\n  const deleteQuestion = (questionId) => {\n    setForm(prev => ({\n      ...prev,\n      questions: prev.questions.filter(q => q.id !== questionId)\n    }));\n  };\n\n  const uploadImageFile = async (file) => {\n    try {\n      const response = await uploadImage(file);\n      return response.data.filename;\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const createQuestion = (type) => {\n    const baseQuestion = {\n      id: Date.now().toString(),\n      type,\n      questionText: '',\n      questionImage: ''\n    };\n\n    switch (type) {\n      case 'categorize':\n        return {\n          ...baseQuestion,\n          categories: [\n            { id: Date.now().toString() + 1, name: 'Category 1', options: [] },\n            { id: Date.now().toString() + 2, name: 'Category 2', options: [] }\n          ],\n          items: []\n        };\n      case 'cloze':\n        return {\n          ...baseQuestion,\n          clozeData: {\n            text: '',\n            blanks: []\n          }\n        };\n      case 'comprehension':\n        return {\n          ...baseQuestion,\n          comprehensionData: {\n            passage: '',\n            questions: []\n          }\n        };\n      default:\n        return baseQuestion;\n    }\n  };\n\n  return (\n    <FormContext.Provider\n      value={{\n        form,\n        isLoading,\n        error,\n        updateForm: updateFormData,\n        addQuestion,\n        updateQuestion,\n        deleteQuestion,\n        saveForm,\n        uploadImage: uploadImageFile\n      }}\n    >\n      {children}\n    </FormContext.Provider>\n  );\n};\n\nexport const useForm = () => useContext(FormContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}